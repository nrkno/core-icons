const fs = require("fs")
const path = require("path")
const process = require("process")
const svg2vectordrawable = require('svg2vectordrawable/src/svg-file-to-vectordrawable-file')

const CORE_ICON_DIRECTORIES = [
    "lib/expressive",
    "lib/icon",
    "lib/logo",
    "lib/preview"
]
const ANDROID_DRAWABLE_FOLDER = "android/icons/src/main/res/drawable"
const ANDROID_ICONS_FOLDER = "android/icons/src/main/kotlin/no/nrk/core/icons"

const svg2vectordrawableOptions = {
    floatPrecision: 4,
    strict: false,
    fillBlack: false,
    xmlTag: false
}

async function app(github, context, exec) {
    convertSvgToXml()
}

async function convertSvgToXml() {
    sanitizeDir(ANDROID_DRAWABLE_FOLDER)
    sanitizeDir(ANDROID_ICONS_FOLDER)

    var allFiles = []
    var hasErrors = false
    for (const directory of CORE_ICON_DIRECTORIES) {
        const files = fs.readdirSync(directory)

        for (const file of files) {
            const xmlFileName = file.replace(".svg", ".xml").replaceAll("-", "_").toLowerCase()
            if (!/^([a-z0-9\_])+\.xml$/.test(xmlFileName)) {
                console.error(`Invalid file name: "${file}"! (output xml name: "${xmlFileName})`)
                hasErrors = true

                continue
            }

            if (allFiles.includes(xmlFileName)) {
                console.error(`Found duplicate file name: "${file}"`)
                hasErrors = true

                continue
            }

            allFiles.push(xmlFileName)

            const svgFile = path.join(directory, file)
            const xmlFile = path.join(ANDROID_DRAWABLE_FOLDER, xmlFileName)

            await svg2vectordrawable.convertFile(svgFile, xmlFile, svg2vectordrawableOptions)
        }
    }

    if (hasErrors) {
        process.exit(1)
    }

    generateKotlinValues()
}

function generateKotlinValues() {
    // Read the files generated above and look for those that have "_expressive" in them and generate Kotlin values from them
    // This assumes that an icon called "horse_expressive.xml" will always have a counterpart named "horse.xml"
    const generatedDrawables = fs.readdirSync(ANDROID_DRAWABLE_FOLDER)

    const lines = []
    lines.push("package no.nrk.core.icons")

    lines.push("")
    lines.push("// Warning: This is an autogenerated file. Please do not edit it manually")
    lines.push("")

    lines.push("data class NrkIcon(")
    lines.push("\tval normal: Int,")
    lines.push("\tval expressive: Int")
    lines.push(")")
    lines.push("")

    lines.push("object NrkIcons {")

    for (const drawable of generatedDrawables) {
        const isExpressive = drawable.endsWith("_expressive.xml")

        if (isExpressive) {
            const expressiveRawName = drawable.replace(".xml", "")
            const iconName = expressiveRawName.replace("_expressive", "")

            const expressiveR = "R.drawable." + expressiveRawName
            const nonExpressiveR = "R.drawable." + expressiveRawName.replace("_expressive", "")

            lines.push("\tval " + convertFromSnakeOrKebabCaseToPascalCase(iconName) + " = NrkIcon(")
            lines.push("\t\tnormal = " + nonExpressiveR + ",")
            lines.push("\t\texpressive = " + expressiveR)
            lines.push("\t)")
            lines.push("")
        }
    }

    // Remove the last newline
    lines.pop()

    // End the object
    lines.push("}")

    const stream = fs.createWriteStream(ANDROID_ICONS_FOLDER + "/NrkIcons.kt", { flags: 'a' });
    for (const line of lines) {
        stream.write(`${line}\n`);
    }
    stream.end();
}

function convertFromSnakeOrKebabCaseToPascalCase(string) {
    return string.split(/[-_]/).map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join('');
}

function sanitizeDir(directory) {
    const generatedDir = path.resolve(directory);
    if (fs.existsSync(generatedDir)) {
        fs.rmSync(generatedDir, { recursive: true });
    }
    fs.mkdirSync(generatedDir, { recurisve: true });
}

module.exports = async (github, context, exec) => {
    return app(github, context, exec)
}

// If script is called directly https://stackoverflow.com/a/6398335
if (require.main === module) {
    convertSvgToXml()
}
